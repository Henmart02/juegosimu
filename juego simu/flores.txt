#include <SFML/Graphics.hpp>
#include <fstream>
#include <vector>
#include <string>
#include <cmath>

const float PI = 3.14159265f;

sf::ConvexShape crearPentagono(float radio, float rotacion = 0.f) {
    sf::ConvexShape shape;
    shape.setPointCount(5);
    for (int i = 0; i < 5; ++i) {
        float angle = rotacion + 2 * PI * i / 5 - PI / 2;
        shape.setPoint(i, sf::Vector2f(radio * std::cos(angle), radio * std::sin(angle)));
    }
    shape.setFillColor(sf::Color::White);
    shape.setOutlineColor(sf::Color::Black);
    shape.setOutlineThickness(1);
    return shape;
}

sf::Vector2f direccionLado(float radio, int i, float rotacionFlor) {
    float ang1 = rotacionFlor + 2 * PI * i / 5 - PI / 2;
    float ang2 = rotacionFlor + 2 * PI * (i + 1) / 5 - PI / 2;
    float mx = (std::cos(ang1) + std::cos(ang2)) / 2;
    float my = (std::sin(ang1) + std::sin(ang2)) / 2;
    return sf::Vector2f(mx * radio * 2, my * radio * 2);
}

const int dFila[5] = {-1, -1, 0, 1, 0};
const int dCol[5] = {0, -1, -1, 0, 1};

int main() {
    sf::RenderWindow window(sf::VideoMode(1400, 1000), "Teselación Precisa de Flores");

    std::ifstream archivo("nivel_flores.txt");
    std::vector<std::string> mapa;
    std::string linea;
    while (std::getline(archivo, linea)) {
        mapa.push_back(linea);
    }

    float radio = 30.f;
    float pasoX = 2.85f * radio;
    float pasoY = 2.45f * radio;

    // CAMBIAR ESTE VALOR PARA ROTAR TODAS LAS FLORES
    float rotacionBase = 0.f; // en radianes (por ejemplo: PI/5, PI/2, etc.)

    std::vector<sf::ConvexShape> pentagonos;

    for (size_t fila = 0; fila < mapa.size(); ++fila) {
        for (size_t col = 0; col < mapa[fila].size(); ++col) {
            if (mapa[fila][col] != 'F') continue;

            float cx = col * pasoX + 100 + (fila % 2) * (pasoX / 2);
            float cy = fila * pasoY + 100;

            // Puedes usar rotación por patrón si deseas
            float rotacionFlor = rotacionBase;

            sf::ConvexShape centro = crearPentagono(radio, rotacionFlor);
            centro.setPosition(cx, cy);
            pentagonos.push_back(centro);

            for (int i = 0; i < 5; ++i) {
                int nf = static_cast<int>(fila) + dFila[i];
                int nc = static_cast<int>(col) + dCol[i];

                if (nf >= 0 && nc >= 0 && nf < (int)mapa.size() && nc < (int)mapa[nf].size()) {
                    if (mapa[nf][nc] == 'F') continue;
                }

                sf::Vector2f dir = direccionLado(radio, i, rotacionFlor);
                float anguloPetalo = rotacionFlor + PI + 2 * PI * i / 5;
                sf::ConvexShape petalo = crearPentagono(radio, anguloPetalo);
                petalo.setPosition(cx + dir.x, cy + dir.y);
                pentagonos.push_back(petalo);
            }
        }
    }

    while (window.isOpen()) {
        sf::Event e;
        while (window.pollEvent(e)) {
            if (e.type == sf::Event::Closed)
                window.close();
        }

        window.clear(sf::Color::Black);
        for (auto& p : pentagonos)
            window.draw(p);
        window.display();
    }

    return 0;
}