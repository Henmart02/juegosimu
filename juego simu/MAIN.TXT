#include <SFML/Graphics.hpp>
#include <vector>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <sstream>

using namespace std;

const int WINDOW_WIDTH = 800;
const int WINDOW_HEIGHT = 800;
const int GRID_ROWS = 10;
const int GRID_COLS = 10;
const int RADIUS = 30;
const int M = 20;
const int N = 10;

struct Cell {
    sf::ConvexShape shape;
    bool isWall = false;
};

sf::Vector2f getPentagonPoint(float angleDeg, float radius, sf::Vector2f center) {
    float angleRad = angleDeg * 3.14159265f / 180.f;
    return {
        center.x + radius * cos(angleRad),
        center.y + radius * sin(angleRad)
    };
}

void createPentagon(sf::ConvexShape& shape, sf::Vector2f center, float radius) {
    shape.setPointCount(5);
    for (int i = 0; i < 5; ++i) {
        shape.setPoint(i, getPentagonPoint(72.f * i - 90.f, radius, {0, 0}));
    }
    shape.setPosition(center);
    shape.setFillColor(sf::Color::White);
    shape.setOutlineColor(sf::Color::Black);
    shape.setOutlineThickness(1);
}

int main() {
    srand(static_cast<unsigned>(time(0)));
    sf::RenderWindow window(sf::VideoMode(WINDOW_WIDTH, WINDOW_HEIGHT), "Escape the Grid - Prisión Cuántica");

    vector<vector<Cell>> grid(GRID_ROWS, vector<Cell>(GRID_COLS));
    int pasos = 0;
    int bateria = M;
    int metasAlcanzadas = 0;

    for (int i = 0; i < GRID_ROWS; ++i) {
        for (int j = 0; j < GRID_COLS; ++j) {
            sf::Vector2f center(j * RADIUS * 2 + 60, i * RADIUS * 2 + 140); // más espacio arriba
            createPentagon(grid[i][j].shape, center, RADIUS);
            if (rand() % 8 == 0) {
                grid[i][j].isWall = true;
                grid[i][j].shape.setFillColor(sf::Color::Black);
            }
        }
    }

    sf::Vector2i player(0, 0);
    sf::Vector2i goal(rand() % GRID_ROWS, rand() % GRID_COLS);
    while (grid[goal.y][goal.x].isWall) {
        goal = {rand() % GRID_ROWS, rand() % GRID_COLS};
    }

    sf::Font font;
    if (!font.loadFromFile("arial.ttf")) return -1;

    sf::Text infoText;
    infoText.setFont(font);
    infoText.setCharacterSize(18);
    infoText.setFillColor(sf::Color::White);
    infoText.setPosition(10, 10);

    sf::RectangleShape infoPanel(sf::Vector2f(350, 80));
    infoPanel.setFillColor(sf::Color(0, 0, 0, 150));
    infoPanel.setPosition(5, 5);
    infoPanel.setOutlineColor(sf::Color::White);
    infoPanel.setOutlineThickness(1);

    sf::RectangleShape helpPanel(sf::Vector2f(770, 60));
    helpPanel.setPosition(15, WINDOW_HEIGHT - 75);
    helpPanel.setFillColor(sf::Color(0, 0, 0, 150));
    helpPanel.setOutlineColor(sf::Color::White);
    helpPanel.setOutlineThickness(1);

    sf::Text helpText;
    helpText.setFont(font);
    helpText.setCharacterSize(14);
    helpText.setFillColor(sf::Color::White);
    helpText.setPosition(20, WINDOW_HEIGHT - 70);
    helpText.setString("Usa W, A, S, D para moverte | Azul = jugador, Verde = meta\nCada paso gasta bateria. Llega a la meta antes de quedarte sin energia.");

    sf::Text mensajeMeta;
    mensajeMeta.setFont(font);
    mensajeMeta.setCharacterSize(22);
    mensajeMeta.setFillColor(sf::Color::Yellow);
    mensajeMeta.setPosition(200, 80);

    while (window.isOpen()) {
        sf::Event event;
        bool seMovio = false;
        sf::Vector2i anterior = player;

        while (window.pollEvent(event)) {
            if (event.type == sf::Event::Closed)
                window.close();

            if (event.type == sf::Event::KeyPressed) {
                if (event.key.code == sf::Keyboard::W && player.y > 0) player.y--;
                else if (event.key.code == sf::Keyboard::S && player.y < GRID_ROWS - 1) player.y++;
                else if (event.key.code == sf::Keyboard::A && player.x > 0) player.x--;
                else if (event.key.code == sf::Keyboard::D && player.x < GRID_COLS - 1) player.x++;

                if (player != anterior && !grid[player.y][player.x].isWall)
                    seMovio = true;
                else
                    player = anterior;
            }
        }

        if (seMovio) {
            pasos++;
            bateria--;

            int ri, rj;
            do {
                ri = rand() % GRID_ROWS;
                rj = rand() % GRID_COLS;
            } while (sf::Vector2i(rj, ri) == goal);

            grid[ri][rj].isWall = !grid[ri][rj].isWall;

            if (pasos % N == 0) {
                do {
                    goal = {rand() % GRID_ROWS, rand() % GRID_COLS};
                } while (grid[goal.y][goal.x].isWall);
            }

            if (player == goal) {
                metasAlcanzadas++;
                mensajeMeta.setString("¡Meta alcanzada! Reiniciando...");
                window.clear();
                for (auto& row : grid)
                    for (auto& cell : row)
                        window.draw(cell.shape);
                window.draw(infoPanel);
                window.draw(infoText);
                window.draw(helpPanel);
                window.draw(helpText);
                window.draw(mensajeMeta);
                window.display();

                sf::sleep(sf::seconds(2));

                bateria = M;
                pasos = 0;

                do {
                    goal = {rand() % GRID_ROWS, rand() % GRID_COLS};
                } while (grid[goal.y][goal.x].isWall);

                mensajeMeta.setString("");
            }

            if (bateria <= 0) {
                window.setTitle("Batería agotada. Fin del juego.");
                sf::sleep(sf::seconds(2));
                window.close();
            }
        }

        for (int i = 0; i < GRID_ROWS; ++i)
            for (int j = 0; j < GRID_COLS; ++j)
                grid[i][j].shape.setFillColor(grid[i][j].isWall ? sf::Color::Black : sf::Color::White);

        grid[player.y][player.x].shape.setFillColor(sf::Color::Blue);
        grid[goal.y][goal.x].shape.setFillColor(sf::Color::Green);

        stringstream ss;
        ss << "Bateria: " << bateria << " | Pasos: " << pasos << "\n";
        ss << "Cambio de meta en: " << (N - (pasos % N)) << " pasos\n";
        ss << "Metas alcanzadas: " << metasAlcanzadas;
        infoText.setString(ss.str());

        window.clear();
        window.draw(infoPanel);
        window.draw(infoText);
        window.draw(helpPanel);
        window.draw(helpText);
        if (!mensajeMeta.getString().isEmpty())
            window.draw(mensajeMeta);
        for (auto& row : grid)
            for (auto& cell : row)
                window.draw(cell.shape);
        window.display();
    }

    return 0;
}
